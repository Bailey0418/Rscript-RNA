###Cibersort分析
setwd("/mnt/raid5/User/bailin/project/241209Constipation_lncRNA/result/04Immune/")
library(e1071)
library(preprocessCore)
library(parallel)

source("/mnt/raid5/User/bailin/project/240909Carotid.plaque/result/bulk/Cibersort/Cibersort.R")
#需要FPKM表达谱
expr <- read.csv("/mnt/raid5/User/bailin/project/241209Constipation_lncRNA/result/01Data/mRNA_FPKM.csv", row.names = 1)
#如果标准化了
#expr <- 2^expr - 1
expr <- cbind(RowName = rownames(expr), expr)
rownames(expr) <- NULL
colnames(expr)[1] <- "Gene Symbol"
head(expr)
write.table(expr, file = "expr.txt", sep = "\t", row.names = F, col.names = TRUE, quote = FALSE)
result1 <- CIBERSORT("LM22.txt", "expr.txt", perm = 1000, QN = F)##QN为分位数归一化。一般芯片数据设置为T，测序数据设置为F

###结果可视化-箱线图
#样本分组信息
expr <- read.csv("/mnt/raid5/User/bailin/project/240909Carotid.plaque/data/GSE43292/preprocessing/exp_norm.csv", row.names = 1)
sample_names <- colnames(expr)
generate_group <- function(sample_name) {
  # 提取样本名的最后一位字符并转换为数值
  last_digit <- as.numeric(substr(sample_name, nchar(sample_name), nchar(sample_name)))
  # 根据最后一位是否为奇数或偶数进行分组
  if (last_digit %% 2 == 1) {
    return("normal")
  } else {
    return("case")
  }
}
groups <- sapply(sample_names, generate_group)
group_info <- data.frame(Sample = sample_names, Group = groups)
print(group_info)
write.table(group_info, file = "group_info.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)

library(tidyverse)
a <- read.table("CIBERSORT-Results.txt",sep = "\t",row.names = 1,check.names = F,header = T)
b <- read.table("group_info.txt",sep = "\t",row.names = 1,check.names = F,header = T)
a <- a[,1:22]
identical(rownames(a),rownames(b))#查看行名是否一致

class(b$Group)
a$group <- b$Group
a <- a %>% rownames_to_column("sample")
library(ggsci)
library(tidyr)
library(ggpubr)
b <- gather(a,key=CIBERSORT,value = Proportion,-c(group,sample))
pdf("cibersort.pdf",width = 15,height = 8)
ggboxplot(b, x = "CIBERSORT", y = "Proportion",fill = "group")+
          stat_compare_means(aes(group = group),method = "wilcox.test",label = "p.signif",
          symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1), symbols = c("***", "**", "*", "ns")))+
          theme(text = element_text(size=10),axis.text.x = element_text(angle=45, hjust=1)+
          scale_fill_manual(values = c("normal" = "lightblue", "case" = "lightcoral")))
dev.off()

###免疫细胞比例与marker基因的相关性
genes <- c("TPH1","MAOB","TDO2","KMO","KYNU","CYP1B1")
a <- read.table("CIBERSORT-Results.txt",sep = "\t",row.names = 1,check.names = F,header = T)
a <- a[,1:22]
expr_CA <- read.csv("/mnt/raid5/User/bailin/project/240909Carotid.plaque/data/GSE43292/preprocessing/exp_norm.csv", row.names = 1)
genes_expr <- as.data.frame(t(expr_CA[rownames(expr_CA) %in% genes,]))
genes_expr <- genes_expr[match(rownames(a),rownames(genes_expr)),]
identical(rownames(a),rownames(genes_expr))

library(linkET)
library(tidyr)
library(tibble)
library(dplyr)
cor_res <- correlate(genes_expr, a ,method = "spearman")

df_r <- cor_res$r %>%
        as.data.frame() %>%
        rownames_to_column(var = "gene") %>%
        pivot_longer(-1,names_to = "cell_type", values_to = "correlation")
df_p <- cor_res$p %>%
        as.data.frame() %>%
        rownames_to_column(var = "gene") %>%
        pivot_longer(-1,names_to = "cell_type", values_to = "pvalue")
df_cor <- df_r %>%
          left_join(df_p) %>%
          mutate(stars = cut(pvalue, breaks = c(-Inf, 0.05, 0.01, 0.00, Inf),right = F, labels = c("***", "**", "*", " ")))
head(df_cor)
df_filtered <- df_cor %>%
  filter(!cell_type %in% c("Correlation", "P-value", "RMSE"))

df_matrix <- df_filtered %>%
  select(gene, cell_type, correlation) %>%
  pivot_wider(names_from = cell_type, values_from = correlation) %>%
  column_to_rownames("gene")
gene_dist <- dist(df_matrix)
gene_clust <- hclust(gene_dist)# 使用层次聚类
df_filtered$gene <- factor(df_filtered$gene, levels = gene_clust$labels[gene_clust$order])# 对 gene 进行聚类后的排序

library(ggplot2)
pdf("cibersort_cor.pdf",width = 15,height = 8)
ggplot(df_filtered, aes(cell_type, gene)) +
  geom_tile(aes(fill = correlation)) +
  geom_text(aes(label = stars), color = "black", size = 4) +
  scale_fill_gradient2(low = "lightblue", high = "lightcoral", mid = "white",
                       limit = c(-1, 1), name = paste0("*    p < 0.05", "\n\n", "**  p < 0.01", "\n\n", "*** p < 0.001", "\n\n", "Correlation")) +
  labs(x = NULL, y = NULL) +
  theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1, color = "black"),
        axis.text.y = element_text(size = 8, color = "black"),
        axis.ticks.y = element_blank(),
        panel.background = element_blank())
dev.off()
