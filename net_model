###输入cytoscape的网络数据即可
library(pheatmap)
library(WGCNA)
# 1. 导入边表数据
df_edges <- read.table("your_edge_file.txt", header=TRUE, sep="\t")  # 修改为你的文件名或直接赋值

# 2. 构建邻接矩阵
genes <- unique(c(df_edges$point1, df_edges$point2))
adj_mat <- matrix(0, nrow=length(genes), ncol=length(genes))
rownames(adj_mat) <- colnames(adj_mat) <- genes

for (i in 1:nrow(df_edges)) {
  g1 <- df_edges$point1[i]
  g2 <- df_edges$point2[i]
  adj_mat[g1, g2] <- 1
  adj_mat[g2, g1] <- 1
}

# 3. 距离矩阵 & 层次聚类
dist_mat <- dist(adj_mat, method="euclidean")
hc <- hclust(dist_mat, method="complete")

# 4. k=2:5 循环探索模块
module_results <- list()

for (k in 2:5) {
  clusters <- cutree(hc, k=k)
  module_list <- split(names(clusters), clusters)
  module_results[[paste0("k", k)]] <- module_list
  
  # 输出模块结果
  cat("\nModules for k =", k, ":\n")
  print(module_list)
  
  # 保存到文件
  write.table(data.frame(Gene=names(clusters), Module=paste0("Module", clusters)),
              file=paste0("Modules_k", k, ".txt"), sep="\t", row.names=FALSE, quote=FALSE)
}

# 5. 绘制树状图并标注模块（以 k=3 为例）
plot(hc, main="Hierarchical Clustering of Genes", xlab="", sub="", cex=0.8)
rect.hclust(hc, k=3, border="red")
dev.off()

# 6. 热图可视化（按聚类顺序）
custom_colors <- colorRampPalette(c("lightblue", "lightcoral"))(100)
pheatmap(adj_mat, cluster_rows=hc, cluster_cols=hc,color = custom_colors, main="Gene Network Heatmap")
dev.off()
# 7. 可选：颜色标签（以 k=3 为例）
clusters_k3 <- cutree(hc, k=3)
colors <- labels2colors(clusters_k3)
table(colors)

# 可保存颜色标记的模块信息
write.table(data.frame(Gene=names(clusters_k3), ModuleColor=colors),
            file="Modules_k3_colors.txt", sep="\t", row.names=FALSE, quote=FALSE)

# 挑选模块做热图
module_id <- 3
module_genes <- names(clusters[clusters == module_id])

# 提取该模块的邻接子矩阵
module_mat <- adj_mat[module_genes, module_genes]

# 绘制热图
pheatmap(module_mat,
         main = paste("Module", module_id, "Gene Heatmap"),
         color = colorRampPalette(c("lightblue", "lightcoral"))(100),
         border_color = NA)
dev.off()

#选模块识别核心基因
library(igraph)

# 将邻接矩阵转换为图对象
g <- graph_from_adjacency_matrix(module_mat, mode="undirected", weighted=TRUE, diag=FALSE)

# 计算每个基因的 Degree（连接数）
deg <- degree(g, mode="all")

# 排名前5的核心基因
top_hub_genes <- names(sort(deg, decreasing=TRUE)[1:5])
print("Top Hub Genes:")
print(top_hub_genes)

# 可选：计算 Betweenness Centrality
bc <- betweenness(g)
top_bc_genes <- names(sort(bc, decreasing=TRUE)[1:5])
print("Top Betweenness Genes:")
print(top_bc_genes)
